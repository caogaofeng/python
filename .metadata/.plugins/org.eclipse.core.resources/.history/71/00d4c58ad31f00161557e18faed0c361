# -*- coding: utf-8 -*-  
import numpy as np  
from sklearn import neighbors, datasets  
from sklearn.metrics import precision_recall_curve  
from sklearn.metrics import classification_report  
from sklearn.cross_validation import train_test_split  
import matplotlib.pyplot as plt 

  
''''' 数据读入 '''  
n_neighbors = 15

# import some data to play with
iris = datasets.load_iris()
X = iris.data[:, :2]  # we only take the first two features. We could
                      # avoid this ugly slicing by using a two-dim dataset
y = iris.target - 1 
  
    

''''' 拆分训练数据与测试数据 '''  
x_train, x_test, y_train, y_test = train_test_split(X, y, test_size = 0.2)  
  
''''' 创建网格以方便绘制 '''  
h = .02  
x_min, x_max = X[:, 0].min() - 0.1, X[:, 0].max() + 0.1  
y_min, y_max = X[:, 1].min() - 1, X[:, 1].max() + 1  
xx, yy = np.meshgrid(np.arange(x_min, x_max, h),  
                     np.arange(y_min, y_max, h))  
  
''''' 训练KNN分类器 '''  
clf = neighbors.KNeighborsClassifier(algorithm='kd_tree')  
clf.fit(x_train, y_train)  
  
'''''测试结果的打印'''  
answer = clf.predict(X)  
print(X)  
print(answer)  
print(y)  
print(np.mean( answer == y))  
  
'''''准确率与召回率'''  
precision, recall, thresholds = precision_recall_curve(y_train, clf.predict(x_train))  
answer = clf.predict_proba(X)[:,1]  
print(classification_report(y, answer, target_names = ['thin', 'fat']))  
  
''''' 将整个测试空间的分类结果用不同颜色区分开'''  
answer = clf.predict_proba(np.c_[xx.ravel(), yy.ravel()])[:,1]  
z = answer.reshape(xx.shape)  
plt.contourf(xx, yy, z, cmap=plt.cm.Paired, alpha=0.8)  
  
''''' 绘制训练样本 '''  
plt.scatter(x_train[:, 0], x_train[:, 1], c=y_train, cmap=plt.cm.Paired)  
plt.xlabel(u'身高')  
plt.ylabel(u'体重')  
plt.show()